# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: arXiv-daily-ai-enhanced

on:
  schedule:
    - cron: "30 1 * * *"   # UTC 时间；可按需调整
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Install dependencies
      run: |
        curl -LsSf https://astral.sh/uv/install.sh | sh
        uv sync

    - name: Crawl arXiv papers
      id: crawl_step
      run: |
        source .venv/bin/activate
        today=$(date -u "+%Y-%m-%d")
        echo "开始爬取 $today 的arXiv论文... / Starting to crawl $today arXiv papers..."

        # 如存在当天文件先删除
        if [ -f "data/${today}.jsonl" ]; then
          echo "🗑️ 发现今日文件已存在，删除重新生成..."
          rm "data/${today}.jsonl"
        fi

        cd daily_arxiv
        export OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}
        export OPENAI_BASE_URL=${{ secrets.OPENAI_BASE_URL }}
        export LANGUAGE="${{ vars.LANGUAGE }}"
        export CATEGORIES="${{ vars.CATEGORIES }}"
        export MODEL_NAME="${{ vars.MODEL_NAME }}"

        # 用 Scrapy 爬取
        scrapy crawl arxiv -o ../data/${today}.jsonl

        # 校验产物
        if [ ! -f "../data/${today}.jsonl" ]; then
          echo "爬取失败，未生成数据文件"
          exit 1
        fi

        echo "crawl_date=$today" >> $GITHUB_OUTPUT
        echo "爬取完成 / Crawling completed"

    - name: Filter by keywords
      run: |
        source .venv/bin/activate
        export TODAY="${{ steps.crawl_step.outputs.crawl_date }}"
        export INCLUDE_RAW="${{ vars.KEYWORDS_INCLUDE }}"
        export EXCLUDE_RAW="${{ vars.KEYWORDS_EXCLUDE }}"

        echo "🔎 Filtering with include keywords: ${INCLUDE_RAW}"
        echo "🚫 Excluding with keywords: ${EXCLUDE_RAW}"

        python - << 'PY'
        import os, re, json
        
        today = os.environ.get("TODAY")
        in_file = f"data/{today}.jsonl"
        out_file = in_file
        
        inc = os.environ.get("INCLUDE_RAW", "").strip()
        exc = os.environ.get("EXCLUDE_RAW", "").strip()
        
        inc_pat = re.compile(inc, re.IGNORECASE) if inc else None
        exc_pat = re.compile(exc, re.IGNORECASE) if exc else None
        
        total, kept = 0, 0
        buf = []

        if os.path.exists(in_file):
            with open(in_file, "r", encoding="utf-8") as f:
                for line in f:
                    total += 1
                    try:
                        obj = json.loads(line)
                    except Exception:
                        continue
                    text = " ".join([
                        str(obj.get("title","")),
                        str(obj.get("summary","")),
                        " ".join(obj.get("categories", [])) if isinstance(obj.get("categories"), list) else str(obj.get("categories","")),
                    ])
                    if inc_pat and not inc_pat.search(text):
                        continue
                    if exc_pat and exc_pat.search(text):
                        continue
                    buf.append(line)
                    kept += 1
        
        with open(out_file, "w", encoding="utf-8") as f:
            for line in buf:
                f.write(line)
        
        print(f"[filter] total={total}, kept={kept}")
        PY

    - name: Check for duplicates
      id: dedup_check
      run: |
        source .venv/bin/activate
        echo "执行去重检查..."

        cd daily_arxiv
        set +e
        python daily_arxiv/check_stats.py
        dedup_exit_code=$?
        set -e

        echo "去重检查退出码: $dedup_exit_code"
        echo "dedup_exit_code=$dedup_exit_code" >> $GITHUB_OUTPUT

        case $dedup_exit_code in
          0)
            echo "has_new_content=true" >> $GITHUB_OUTPUT
            ;;
          1)
            echo "has_new_content=false" >> $GITHUB_OUTPUT
            echo "skip_reason=no_new_content" >> $GITHUB_OUTPUT
            ;;
          2)
            echo "has_new_content=false" >> $GITHUB_OUTPUT
            echo "skip_reason=processing_error" >> $GITHUB_OUTPUT
            exit 1
            ;;
          *)
            echo "has_new_content=false" >> $GITHUB_OUTPUT
            echo "skip_reason=unknown_error" >> $GITHUB_OUTPUT
            exit 1
            ;;
        esac

    - name: AI Enhancement Processing
      if: steps.dedup_check.outputs.has_new_content == 'true'
      run: |
        source .venv/bin/activate
        today=${{ steps.crawl_step.outputs.crawl_date }}
        echo "开始AI增强处理..."

        cd ai
        export OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}
        export OPENAI_BASE_URL=${{ secrets.OPENAI_BASE_URL }}
        export LANGUAGE="${{ vars.LANGUAGE }}"
        export MODEL_NAME="${{ vars.MODEL_NAME }}"

        python enhance.py --data ../data/${today}.jsonl
        if [ $? -ne 0 ]; then
          echo "AI处理失败"
          exit 1
        fi
        echo "AI增强处理完成"

    - name: Convert to Markdown
      if: steps.dedup_check.outputs.has_new_content == 'true'
      run: |
        source .venv/bin/activate
        today=${{ steps.crawl_step.outputs.crawl_date }}
        echo "转换为Markdown格式..."

        export LANGUAGE="${{ vars.LANGUAGE }}"
        cd to_md

        AI_FILE="../data/${today}_AI_enhanced_${LANGUAGE}.jsonl"
        if [ -f "$AI_FILE" ]; then
          python convert.py --data "$AI_FILE"
        else
          echo "错误：未找到AI增强文件：$AI_FILE"
          exit 1
        fi
        echo "Markdown转换完成"

    - name: Update file list
      if: steps.dedup_check.outputs.has_new_content == 'true'
      run: |
        echo "更新文件列表..."
        ls data/*.jsonl | sed 's|data/||' > assets/file-list.txt
        echo "文件列表更新完成"

    - name: Generate password hash and inject into config
      if: steps.dedup_check.outputs.has_new_content == 'true'
      run: |
        echo "🔐 Generating password hash for authentication..."
        PASSWORD="${{ secrets.ACCESS_PASSWORD }}"
        if [ -z "$PASSWORD" ]; then
          PASSWORD_HASH="DISABLED_NO_PASSWORD_SET_IN_SECRETS"
          echo "⚠️ 未设置 ACCESS_PASSWORD，网页不启用登录"
        else
          PASSWORD_HASH=$(echo -n "$PASSWORD" | openssl dgst -sha256 -hex | awk '{print $2}')
          echo "✅ Password hash generated"
        fi
        if [ -f "js/auth-config.js" ]; then
          sed -i "s/PLACEHOLDER_PASSWORD_HASH/$PASSWORD_HASH/" js/auth-config.js
        else
          echo "❌ ERROR: js/auth-config.js not found!"
          exit 1
        fi
        echo "🔐 Authentication setup complete"

    - name: Summary
      run: |
        if [ "${{ steps.dedup_check.outputs.has_new_content }}" = "true" ]; then
          echo "✅ 工作流完成：有新内容并成功处理"
        else
          case "${{ steps.dedup_check.outputs.skip_reason }}" in
            "no_new_content") echo "ℹ️ 去重后无新内容" ;;
            "processing_error") echo "⚠️ 去重处理出错" ;;
            "unknown_error") echo "⚠️ 未知错误" ;;
            *) echo "ℹ️ 跳过处理（原因未知）" ;;
          esac
        fi

    - name: Commit changes
      if: steps.dedup_check.outputs.has_new_content == 'true'
      run: |
        git config --global user.email "${{ vars.EMAIL }}"
        git config --global user.name "${{ vars.NAME }}"
        git add .
        if git diff --staged --quiet; then
          echo "没有变更需要提交"
          exit 0
        fi
        git commit -m "update: $(date -u '+%Y-%m-%d') arXiv papers"
        echo "变更已提交"

    - name: Pull latest changes and push
      if: steps.dedup_check.outputs.has_new_content == 'true'
      run: |
        git config pull.rebase true
        git config rebase.autoStash true
        for i in {1..3}; do
          echo "推送尝试 $i"
          if git push origin main; then
            echo "推送成功"
            break
          else
            echo "推送失败，拉取最新变更后重试..."
            git pull origin main --no-edit || true
            if [ $i -eq 3 ]; then
              echo "3次尝试后推送失败"
              exit 1
            fi
          fi
        done
